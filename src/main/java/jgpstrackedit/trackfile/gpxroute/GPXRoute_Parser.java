/*
 * File:           GPXRoute_Parser.java
 * Date:           20. Mai 2010  10:57
 *
 * @author  hlutnik
 * @version generated by NetBeans XML module
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package jgpstrackedit.trackfile.gpxroute;

import java.io.IOException;
import java.util.Stack;

import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.*;
import org.xml.sax.helpers.AttributesImpl;

/**
 *
 * @author hlutnik
 */
public class GPXRoute_Parser implements ContentHandler {
    private GPXRoute_Handler handler;
    private Stack<Context> contextStack;
    private StringBuffer buffer;
    private EntityResolver resolver;

    /**
     *
     * Creates a parser instance.
     * @param handler handler interface implementation (never <code>null</code>
     * @param resolver SAX entity resolver implementation or <code>null</code>.
     * It is recommended that it could be able to resolve at least the DTD.
     */
    public GPXRoute_Parser(final GPXRoute_Handler handler, final EntityResolver resolver) {
        this.handler = handler;
        this.resolver = resolver;
        buffer = new StringBuffer(111);
        contextStack = new java.util.Stack<>();
    }

    /**
     *
     * This SAX interface method is implemented by the parser.
     */
    public final void setDocumentLocator(Locator locator) {
    }

    /**
     *
     * This SAX interface method is implemented by the parser.
     */
    public final void startDocument() throws SAXException {
    }

    /**
     *
     * This SAX interface method is implemented by the parser.
     */
    public final void endDocument() throws SAXException {
    }

    /**
     *
     * This SAX interface method is implemented by the parser.
     */
    public final void startElement(java.lang.String ns, java.lang.String name, java.lang.String qname, org.xml.sax.Attributes attrs) throws org.xml.sax.SAXException {
        dispatch(true);
        contextStack.push(new Context(qname, new org.xml.sax.helpers.AttributesImpl(attrs)));
        if ("rtept".equals(qname)) {
            handler.start_rtept(attrs);
        } else if ("link".equals(qname)) {
            handler.start_link(attrs);
        } else if ("rte".equals(qname)) {
            handler.start_rte(attrs);
        } else if ("copyright".equals(qname)) {
            handler.handle_copyright(attrs);
        } else if ("gpx".equals(qname)) {
            handler.start_gpx(attrs);
        } else if ("metadata".equals(qname)) {
            handler.start_metadata(attrs);
        } else {
        	// LH
            if ("time".equals(qname)) {
            } else if ("text".equals(qname)) {
            } else if ("name".equals(qname)) {
            } else if ("ele".equals(qname)) {
            } else {
        	throw new SAXException("Illegal tag: "+qname);
            }
        }
    }

    /**
     *
     * This SAX interface method is implemented by the parser.
     */
    public final void endElement(java.lang.String ns, java.lang.String name, java.lang.String qname) throws org.xml.sax.SAXException {
        dispatch(false);
        contextStack.pop();
        if ("rtept".equals(qname)) {
            handler.end_rtept();
        } else if ("link".equals(qname)) {
            handler.end_link();
        } else if ("rte".equals(qname)) {
            handler.end_rte();
        } else if ("gpx".equals(qname)) {
            handler.end_gpx();
        } else if ("metadata".equals(qname)) {
            handler.end_metadata();
        }
    }

    /**
     *
     * This SAX interface method is implemented by the parser.
     */
    public final void characters(char[] chars, int start, int len) throws SAXException {
        buffer.append(chars, start, len);
    }

    /**
     *
     * This SAX interface method is implemented by the parser.
     */
    public final void ignorableWhitespace(char[] chars, int start, int len) throws SAXException {
    }

    /**
     *
     * This SAX interface method is implemented by the parser.
     */
    public final void processingInstruction(String target, String data) throws SAXException {
    }

    public final void startPrefixMapping(java.lang.String prefix, java.lang.String uri) throws org.xml.sax.SAXException {
    }

    public final void endPrefixMapping(java.lang.String prefix) throws org.xml.sax.SAXException {
    }

    public final void skippedEntity(java.lang.String name) throws org.xml.sax.SAXException {
    }

    private void dispatch(final boolean fireOnlyIfMixed) throws SAXException {
        if (fireOnlyIfMixed && buffer.length() == 0) {
            return;
        }
        //skip it
        Context ctx = contextStack.peek();
        String here = ctx.getQname();
        org.xml.sax.Attributes attrs = ctx.getAttributes();
        if ("time".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException("Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_time(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("text".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException("Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_text(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("name".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException("Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_name(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("ele".equals(here)) {
            if (fireOnlyIfMixed) {
                throw new IllegalStateException("Unexpected characters() event! (Missing DTD?)");
            }
            handler.handle_ele(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else {
            if ("rtept".equals(here)) {
            } else if ("link".equals(here)) {
            } else if ("rte".equals(here)) {
            } else if ("copyright".equals(here)) {
            } else if ("gpx".equals(here)) {
            } else if ("metadata".equals(here)) {            	
            } else {
        	// LH
        	throw new SAXException("Illegal tag: "+here);
            }
        }
        buffer.delete(0, buffer.length());
    }

    /**
     *
     * The recognizer entry method taking an InputSource.
     * @param input InputSource to be parsed.
     * @throws java.io.IOException on I/O error
     * @throws org.xml.sax.SAXException propagated exception thrown by a DocumentHandler
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfying the requested configuration cannot be created
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation cannot be instantiated
     */
    public void parse(final org.xml.sax.InputSource input) throws SAXException, ParserConfigurationException, IOException {
        parse(input, this);
    }

    /**
     *
     * The recognizer entry method taking a URL.
     * @param url URL Source to be parsed.
     * @throws java.io.IOException on I/O error
     * @throws org.xml.sax.SAXException propagated exception thrown by a DocumentHandler
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfying the requested configuration cannot be created
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation cannot be instantiated
     */
    public void parse(final java.net.URL url) throws SAXException, ParserConfigurationException, IOException {
        parse(new org.xml.sax.InputSource(url.toExternalForm()), this);
    }

    /**
     *
     * The recognizer entry method taking an Inputsource.
     * @param input InputSource to be parsed.
     * @throws java.io.IOException on I/O error
     * @throws org.xml.sax.SAXException propagated exception thrown by a DocumentHandler
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfying the requested configuration cannot be created
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation cannot be instantiated
     */
    public static void parse(final org.xml.sax.InputSource input, final GPXRoute_Handler handler) throws SAXException, ParserConfigurationException, IOException {
        parse(input, new GPXRoute_Parser(handler, null));
    }

    /**
     *
     * The recognizer entry method taking a URL.
     * @param url URL source to be parsed.
     * @throws java.io.IOException on I/O error
     * @throws org.xml.sax.SAXException propagated exception thrown by a DocumentHandler
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfying the requested configuration cannot be created
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation cannot be instantiated
     */
    public static void parse(final java.net.URL url, final GPXRoute_Handler handler) throws SAXException, ParserConfigurationException, IOException {
        parse(new org.xml.sax.InputSource(url.toExternalForm()), handler);
    }

    private static void parse(final org.xml.sax.InputSource input, final GPXRoute_Parser recognizer) throws SAXException, ParserConfigurationException, IOException {
        javax.xml.parsers.SAXParserFactory factory = javax.xml.parsers.SAXParserFactory.newInstance();
        factory.setValidating(false);
        //the code was generated according DTD
        factory.setNamespaceAware(false);
        //the code was generated according DTD
        XMLReader parser = factory.newSAXParser().getXMLReader();
        parser.setContentHandler(recognizer);
        parser.setErrorHandler(recognizer.getDefaultErrorHandler());
        if (recognizer.resolver != null) {
            parser.setEntityResolver(recognizer.resolver);
        }
        parser.parse(input);
    }

    /**
     *
     * Creates default error handler used by this parser.
     * @return org.xml.sax.ErrorHandler implementation
     */
    protected ErrorHandler getDefaultErrorHandler() {
        return new ErrorHandler() {

            public void error(SAXParseException ex) throws SAXException {
                if (contextStack.isEmpty()) {
                    System.err.println("Missing DOCTYPE.");
                }
                throw ex;
            }

            public void fatalError(SAXParseException ex) throws SAXException {
                throw ex;
            }

            public void warning(SAXParseException ex) throws SAXException {
            }
        };
    }
    
    private class Context {
    	private final String qname;
    	private final org.xml.sax.helpers.AttributesImpl attributes;
    	
    	
		public Context(String qname, AttributesImpl attributes) {
			this.qname = qname;
			this.attributes = attributes;
		}
		
		public String getQname() {
			return qname;
		}
		
		public org.xml.sax.helpers.AttributesImpl getAttributes() {
			return attributes;
		}
    }
}
