/*
 * File:           TrackHandlerImpl.java
 * Date:           18. Januar 2012  11:05
 *
 * @author  hlutnik
 * @version generated by NetBeans XML module
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jgpstrackedit.trackfile.gpxtrack;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;

/**
 * TrackHandlerImpl
 *
 * @author hlutnik
 */
public class TrackHandlerImpl implements TrackHandler {
    private static final Logger logger = LoggerFactory.getLogger(TrackHandlerImpl.class);

    public void handle_gpsies_totalAscentMeter(final String data, final Attributes meta) throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("handle_gpsies_totalAscentMeter: " + meta);
        }
    }

    public void handle_text(final String data, final Attributes meta) throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("handle_text: " + meta);
        }
    }

    public void start_trkpt(final Attributes meta) throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("start_trkpt: " + meta);
        }
    }

    public void end_trkpt() throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("end_trkpt()");
        }
    }

    public void start_link(final Attributes meta) throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("start_link: " + meta);
        }
    }

    public void end_link() throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("end_link()");
        }
    }

    public void start_trk(final Attributes meta) throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("start_trk: " + meta);
        }
    }

    public void end_trk() throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("end_trk()");
        }
    }

    public void start_extensions(final Attributes meta) throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("start_extensions: " + meta);
        }
    }

    public void end_extensions() throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("end_extensions()");
        }
    }

    public void handle_time(final String data, final Attributes meta) throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("handle_time: " + meta);
        }
    }

    public void start_trkseg(final Attributes meta) throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("start_trkseg: " + meta);
        }
    }

    public void end_trkseg() throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("end_trkseg()");
        }
    }

    public void handle_gpsies_maxHeightMeter(final String data, final Attributes meta) throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("handle_gpsies_maxHeightMeter: " + meta);
        }
    }

    public void handle_name(final String data, final Attributes meta) throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("handle_name: " + meta);
        }
    }

    public void handle_gpsies_totalDescentMeter(final String data, final Attributes meta) throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("handle_gpsies_totalDescentMeter: " + meta);
        }
    }

    public void handle_gpsies_property(final String data, final Attributes meta) throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("handle_gpsies_property: " + meta);
        }
    }

    public void handle_gpsies_minHeightMeter(final String data, final Attributes meta) throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("handle_gpsies_minHeightMeter: " + meta);
        }
    }

    public void start_gpx(final Attributes meta) throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("start_gpx: " + meta);
        }
    }

    public void end_gpx() throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("end_gpx()");
        }
    }

    public void handle_gpsies_trackLengthMeter(final String data, final Attributes meta) throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("handle_gpsies_trackLengthMeter: " + meta);
        }
    }

    public void handle_ele(final String data, final Attributes meta) throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("handle_ele: " + meta);
        }
    }

    public void start_metadata(final Attributes meta) throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("start_metadata: " + meta);
        }
    }

    public void end_metadata() throws SAXException {
        if (logger.isDebugEnabled()) {
            logger.debug("end_metadata()");
        }
    }
    
}
